#!/bin/bash

#set -x 

#################### Config Variables ########################
DEFAULTS=${DEFAULTS:-"/etc/default/ows"}

if [ -x "$DEFAULTS" ]; then
  echo "OWS not fully configured. Check $DEFAULTS"
  exit 0
fi

# Read configuration variable file if it is present
[ -r $DEFAULTS ] && . $DEFAULTS

######################################################################

function cleanup() {
  echo "you hit Ctrl-C/Ctrl-\, now exiting..";
  echo "Kill all subprocesses"
  [[ -z "$(jobs -pr)" ]] || kill $(jobs -pr);
  exit
}
trap 'cleanup' SIGINT SIGQUIT

function archive {
  local age=$(date --date="-$1 days" '+%s')
  local dir=$2
  
  cd $dir

  for i in $dir/*; do
    d=$(basename $i)
    if [[ $d == 20* ]]; then
      date=$(date --date "$d" '+%s')
      if [ $? = 0 ]; then
        if [ $date -le $age ]; then
          echo "Create Archive archive/$d.tgz"
          GZIP='--rsyncable' tar zcf archive/$d.tgz $i
          rm -Rf $i
        fi
      fi
    fi
  done
  lastday=$(ls -d1 ????-??-?? | sort -r | head -1)
  if [ -d ${REPORTDIR}/$lastday ]; then
    if [ -f ${REPORTDIR}/$lastday/commits ]; then
      lastcommit=$(cat ${REPORTDIR}/$lastday/commits | head -1)
      if [ -f $lastday/$lastcommit/index.html ]; then
        echo "Update Latest sym link $lastday/$lastcommit"
        if [ -d $lastday/$lastcommit ]; then
          rm -Rf latest
          mkdir -p latest
          ln -s ../$lastday/$lastcommit latest/today
        else
          echo "$lastday/$lastcommit does not exists. OWS could be outdated"
        fi
      else
        echo "$lastday/$lastcommit/index.html does not exists. OWS could be outdated"
      fi
    else
      echo "${REPORTDIR}/$lastday/commits does not exists. OWS could be outdated"
    fi
  else
    echo "Nothing new. Carry On"
  fi
  if [ ! -e latest/today ]; then
    echo "Symlink BROKEN. SITE DOWN"
  fi
}

function archive-reports {
  local age=$(date --date="-$1 days" '+%s')
  local dir=$2
  
  cd $dir
  mkdir -p $dir/archive

  for i in $dir/*; do
    d=$(basename $i)
    if [[ $d == 20* ]]; then
      date=$(date --date "$d" '+%s')
      if [ $? = 0 ]; then
        if [ $date -le $age ]; then
          echo "Create Archive archive/$d.tgz"
          GZIP='--rsyncable' tar zcf archive/$d.tgz $i
          rm -Rf $i
        fi
      fi
    fi
  done
}


# Usage info
show_help() {
cat << EOF
Usage: ${0##*/} [-h] [-a AGE] [DIR]
Archive old ows reports

    -h          display this help and exit
    -a AGE      AGE is an integer expressing the age of ows 
                reports (default 11 days).

DIR is the directory containing the html ows reports.

EOF
}

age=""
verbose=0

OPTIND=1
while getopts "ha:" opt; do
    case "$opt" in
        h)
            show_help
            exit 0
            ;;
        a)
            age=$OPTARG
            ;;
        '?')
            show_help >&2
            exit 1
            ;;
    esac
done
shift "$((OPTIND-1))" # Shift off the options and optional --.

dir=${TARGETDIR}
age=${age:-"11"}

if [ -d $dir ]; then
  mkdir -p $dir/archive
else
  echo "$dir : Not such directory"
  show_help >&2
  exit 1
fi

if hash optipng 2>/dev/null ; then
  if [ -d ${TARGETDIR}/$(date +%Y-%m-%d) ]; then
    echo "PNG compression"
    find ${TARGETDIR}/$(date +%Y-%m-%d) -name plot.png -exec optipng {} \;
  fi
fi

if hash hardlink 2>/dev/null ; then
  if [ pgrep "hardlink" 2> /dev/null ]; then
    echo "Skip hardlink : already running"
  else
    echo "Remove duplicates file"
    hardlink ${TARGETDIR}
  fi
fi

echo "Archiving all reports older then $age days in $dir/archive"
archive $age $dir
archive-reports $age /srv/data/ows/reports
#rsync -avz html/ hazel.rocq.inria.fr:web/public_html/tmp/html/
