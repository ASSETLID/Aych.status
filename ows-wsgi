#!/usr/bin/python

import os, sys
lib_path = os.path.abspath(os.path.join('..'))
sys.path.append(lib_path)

from bottle import Bottle, run
from bottle import get, post, request, response, static_file
import json
import base64
import git
from git.exc import GitCommandError
import uuid
import tempfile
import owsdiff
from jinja2 import Environment, FileSystemLoader, FileSystemBytecodeCache
from urlparse import urlparse

import pprint
pp = pprint.PrettyPrinter(indent=4)

TEMPLATES="/home/ows/ows"
bcc = FileSystemBytecodeCache('/tmp/jinja_cache', '%s.cache')
j2_env = Environment(loader=FileSystemLoader(TEMPLATES),trim_blocks=True,bytecode_cache=bcc,cache_size=100)

app = application = Bottle()

os.environ = owsdiff.source(os.getenv('DEFAULTS',"/etc/default/ows2"))
VERSIONS = "4.02.2 3.12.1 4.00.1 4.01.0 4.02.0 4.02.1"
GITURL = 'git://github.com/ocaml/opam-repository'
options = {
        'versions'  : os.getenv('VERSIONS',VERSIONS).split(),
        'distcheck' : os.getenv('DISTCHECK','dose-distcheck'),
        'opam'      : os.getenv('OPAM','opam'),
        'opamrepo'  : os.path.join(os.getenv('DATADIR','/tmp'),"opam-repository"),
        'opamroot'  : os.path.join(os.getenv('DATADIR','/tmp'),"opam-root"),
        'opamcomp'  : os.path.join(os.getenv('DATADIR','/tmp'),"opam-compilers"),
        'owscache'  : os.path.join(os.getenv('DATADIR','/tmp'),"cache"),
        'giturl'    : None,
        'nocache'   : False }

def makeoptions(nocache,giturl) :
    # I'm wondering if build the url this way opens up a security hole
    reponame = (urlparse(giturl).netloc + urlparse(giturl).path).replace("/","-")

    options['nocache']  = nocache
    options['opamrepo'] = os.path.join(os.getenv('DATADIR','/tmp'),reponame,"opam-repository")
    options['opamroot'] = os.path.join(os.getenv('DATADIR','/tmp'),reponame,"opam-root")
    options['opamcomp'] = os.path.join(os.getenv('DATADIR','/tmp'),reponame,"opam-compilers")
    options['owscache'] = os.path.join(os.getenv('DATADIR','/tmp'),reponame,"cache")
    options['giturl'] = giturl
    
    return options

def dataget(data) :
    commit1 = data.get('commit1',None)
    commit2 = data.get('commit2',None)
    patch = data.get('patch',None)
    nocache = True if (data.get('nocache',"False")) == "True" else False
    giturl = data.get('giturl',GITURL)
    return (commit1,commit2,patch,nocache,giturl)

@app.get('/compare/form')
def form():
    template = j2_env.get_template('templates/compare/form.html')
    output = template.render({'baseurl' : os.getenv('BASEURL',"http://ows.irill.org")})
    return output

@app.post('/compare/submit')
def submit():
    diff = []
    try :
        (commit1,commit2,patch,nocache,giturl) = dataget(request.forms)
        options = makeoptions(nocache,giturl)
        status = "success"
        message = None
    except ValueError :
        status = "error"
        message = "FORM Data Error"
        patch = None
        commit2 = None

    print "diff %s %s" % (commit2,patch)

    if patch :
        (fid,patchfile) = tempfile.mkstemp('ows-wsgi')
        with open(patchfile, 'w') as open_file:
            open_file.write(patch.file.read())
        open_file.close()
        try :
            diff = owsdiff.patch(commit1,patchfile,options)
        except GitCommandError :
            error = "Apply Patch Failed"
        os.remove(patchfile)
    elif commit2 :
        try :
            diff = owsdiff.run(commit1,commit2,options)
        except GitCommandError :
            error = "Checkout commit Failed"
 
    template = j2_env.get_template('templates/compare/modal.html')
    output = template.render({'report' : diff, 'error' : message, 'commit1' : commit1, 'commit2' : commit2, 'baseurl' : BASEURL})
    return output

@app.post('/compare/api')
def jsondiff():
    diff = []
    try :
        (commit1,commit2,patch,nocache,giturl) = dataget(request.json)
        options = makeoptions(nocache,giturl)
        status = "success"
        message = ""
    except ValueError :
        status = "error"
        message = "JSON Object Error"
        patch = None
        commit2 = None

    if patch :
        (fid,patchfile) = tempfile.mkstemp('ows-wsgi')
        with open(patchfile, 'w') as open_file:
            open_file.write(base64.b64decode(patch))
        open_file.close()
        try :
            diff = owsdiff.patch(commit1,patchfile,options)
        except GitCommandError : 
            status = "fail"
            message = "Apply Patch Failed"

        os.remove(patchfile)
    elif commit2 :
        try :
            diff = owsdiff.run(commit1,commit2,options)
        except GitCommandError :
            status = "fail"
            message = "Checkout commit Failed"

    response.content_type = 'application/json'
    return json.dumps({ 'status' : status, 'message' : message, 'result' : diff})

class StripPathMiddleware(object):
    '''
    Get that slash out of the request
    '''
    def __init__(self, a):
        self.a = a
    def __call__(self, e, h):
        e['PATH_INFO'] = e['PATH_INFO'].rstrip('/')
        return self.a(e, h)

if __name__ == '__main__':
    run(app=StripPathMiddleware(app),
            host='localhost', port=8080, debug=True)
